services:

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"    # jaeger.thrift
      - "6832:6832/udp"    # jaeger.compact thrift
      - "16686:16686"      # UI
      - "4317:4317"        # OTLP/gRPC (traces)
    networks:
      - app-network

  booking-orchestrator-service:
    build: ./booking-orchestrator-service
    container_name: booking-orchestrator-service
    ports:
      - "8082:8080"
    volumes:
      - ./agents:/agents:ro
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-ticket:5432/ticketdb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpass
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: "true"
      JAVA_TOOL_OPTIONS: "-javaagent:/agents/opentelemetry-javaagent.jar"
      OTEL_SERVICE_NAME: "booking-orchestrator-service"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    depends_on:
      kafka:
        condition: service_healthy
      axon-server:
        condition: service_healthy
      postgres-ticket:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - app-network

  flight-service:
    build: ./flight-service
    container_name: flight-service
    ports:
      - "8083:8080"
    volumes:
      - ./agents:/agents:ro
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-flight:5432/flightdb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpass
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: "true"
      JAVA_TOOL_OPTIONS: "-javaagent:/agents/opentelemetry-javaagent.jar"
      OTEL_SERVICE_NAME: "flight-service"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    depends_on:
      kafka:
        condition: service_healthy
      axon-server:
        condition: service_healthy
      postgres-flight:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - app-network

  flight-query-service:
    build: ./flight-query-service
    container_name: flight-query-service
    ports:
      - "8084:8080"
    volumes:
      - ./agents:/agents:ro
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-flightquery:5432/flightquerydb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpass
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: "true"
      JAVA_TOOL_OPTIONS: "-javaagent:/agents/opentelemetry-javaagent.jar"
      OTEL_SERVICE_NAME: "flight-query-service"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    depends_on:
      kafka:
        condition: service_healthy
      axon-server:
        condition: service_healthy
      postgres-flightquery:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - app-network

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8085:8080"
    volumes:
      - ./agents:/agents:ro
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment:5432/paymentdb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpass
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: "true"
      JAVA_TOOL_OPTIONS: "-javaagent:/agents/opentelemetry-javaagent.jar"
      OTEL_SERVICE_NAME: "payment-service"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    depends_on:
      kafka:
        condition: service_healthy
      axon-server:
        condition: service_healthy
      postgres-payment:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - app-network

  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  postgres-flightquery:
    image: postgres:17-alpine
    container_name: postgres-flightquery
    restart: always
    environment:
      POSTGRES_DB: flightquerydb
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
    ports:
      - "5433:5432"
    volumes:
      - pg_data_flightquery:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser -d flightquerydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres-flight:
    image: postgres:17-alpine
    container_name: postgres-flight
    restart: always
    environment:
      POSTGRES_DB: flightdb
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
    ports:
      - "5434:5432"
    volumes:
      - pg_data_flight:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser -d flightdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres-ticket:
    image: postgres:17-alpine
    container_name: postgres-ticket
    restart: always
    environment:
      POSTGRES_DB: ticketdb
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
    ports:
      - "5435:5432"
    volumes:
      - pg_data_ticket:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser -d ticketdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres-payment:
    image: postgres:17-alpine
    container_name: postgres-payment
    restart: always
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
    ports:
      - "5436:5432"
    volumes:
      - pg_data_payment:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pguser -d paymentdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  axon-server:
    image: axoniq/axonserver:latest
    container_name: axon-server
    ports:
      - "8024:8024"  # HTTP Dashboard
      - "8124:8124"  # gRPC for apps
    environment:
      AXONIQ_AXONSERVER_NAME: axon-server
      AXONIQ_AXONSERVER_HOSTNAME: axon-server
      AXONIQ_AXONSERVER_DEVMODE_ENABLED: "true"
    volumes:
      - axon-data:/axonserver/data
      - axon-events:/axonserver/events
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8024/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=pass
    networks:
      - app-network

volumes:
  pg_data_flightquery:
  pg_data_flight:
  pg_data_ticket:
  pg_data_payment:
  axon-data:
  axon-events:
  kafka-data:
  grafana_data:

networks:
  app-network:
    driver: bridge
